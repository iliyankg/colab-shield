# Start with a base image
FROM golang:1.22-alpine

# Define the default values for the build arguments
ARG ARG_GRPC_PORT=1337
ARG ARG_HTTP_PORT=1338
ARG ARG_REDIS_HOST="redis"
ARG ARG_REDIS_PORT=6379
ARG ARG_REDIS_PASSWORD="redis"
ARG ARG_GIN_MODE="debug"
ARG ARG_DELVE_PORT=2345

# Install curl
RUN apk add --no-cache curl

# Add delve for debugging
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# Set the working directory inside the container to match
# the workspace directory in the devcontainer
WORKDIR /workspaces/colab-shield

# Copy the source code into the container
COPY ./backend ./backend

#TODO: Only for dev purposes and should be removed.
COPY ./protos ./protos 

# Download the Go module dependencies
RUN cd backend && go mod download

# Build the Go application
RUN cd backend && go build .

# Set up environment variables
ENV COLABSHIELD_GRPC_PORT=$ARG_GRPC_PORT
ENV COLABSHIELD_HTTP_PORT=$ARG_HTTP_PORT
ENV REDIS_HOST=$ARG_REDIS_HOST
ENV REDIS_PORT=$ARG_REDIS_PORT
ENV REDIS_PASSWORD=$ARG_REDIS_PASSWORD
ENV GIN_MODE=$ARG_GIN_MODE
ENV DELVE_PORT=$ARG_DELVE_PORT

# Expose the ports
EXPOSE $ARG_GRPC_PORT
EXPOSE $ARG_HTTP_PORT
EXPOSE $ARG_DELVE_PORT

# Healthcheck 
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD curl --fail http://localhost:$COLABSHIELD_HTTP_PORT/health || exit 1 

# Deliberately using shell form of entry point to allow for environment variable substitution
ENTRYPOINT dlv --continue --accept-multiclient --listen=:$DELVE_PORT --headless=true --api-version=2 --log exec ./backend/backend

